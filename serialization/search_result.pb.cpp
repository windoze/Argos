// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "search_result.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* SearchResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SearchResult_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Histo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Histo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Histo_Pair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Histo_Pair_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeoLoc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeoLoc_reflection_ = NULL;
const ::google::protobuf::Descriptor* Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Value_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Value_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Document_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Document_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_search_5fresult_2eproto() {
  protobuf_AddDesc_search_5fresult_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "search_result.proto");
  GOOGLE_CHECK(file != NULL);
  SearchResult_descriptor_ = file->message_type(0);
  static const int SearchResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, returned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, time_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, histos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, documents_),
  };
  SearchResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchResult_descriptor_,
      SearchResult::default_instance_,
      SearchResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchResult));
  SearchResult_Status_descriptor_ = SearchResult_descriptor_->enum_type(0);
  Histo_descriptor_ = file->message_type(1);
  static const int Histo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histo, field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histo, pairs_),
  };
  Histo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Histo_descriptor_,
      Histo::default_instance_,
      Histo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Histo));
  Histo_Pair_descriptor_ = Histo_descriptor_->nested_type(0);
  static const int Histo_Pair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histo_Pair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histo_Pair, count_),
  };
  Histo_Pair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Histo_Pair_descriptor_,
      Histo_Pair::default_instance_,
      Histo_Pair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histo_Pair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histo_Pair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Histo_Pair));
  GeoLoc_descriptor_ = file->message_type(2);
  static const int GeoLoc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoLoc, lng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoLoc, lat_),
  };
  GeoLoc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeoLoc_descriptor_,
      GeoLoc::default_instance_,
      GeoLoc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoLoc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoLoc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeoLoc));
  Value_descriptor_ = file->message_type(3);
  static const int Value_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, svalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, ivalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, dvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, geoloc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, ivalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, dvalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, geolocs_),
  };
  Value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Value_descriptor_,
      Value::default_instance_,
      Value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Value));
  Value_Type_descriptor_ = Value_descriptor_->enum_type(0);
  Document_descriptor_ = file->message_type(4);
  static const int Document_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, values_),
  };
  Document_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Document_descriptor_,
      Document::default_instance_,
      Document_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Document));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_search_5fresult_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchResult_descriptor_, &SearchResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Histo_descriptor_, &Histo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Histo_Pair_descriptor_, &Histo_Pair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeoLoc_descriptor_, &GeoLoc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Value_descriptor_, &Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Document_descriptor_, &Document::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_search_5fresult_2eproto() {
  delete SearchResult::default_instance_;
  delete SearchResult_reflection_;
  delete Histo::default_instance_;
  delete Histo_reflection_;
  delete Histo_Pair::default_instance_;
  delete Histo_Pair_reflection_;
  delete GeoLoc::default_instance_;
  delete GeoLoc_reflection_;
  delete Value::default_instance_;
  delete Value_reflection_;
  delete Document::default_instance_;
  delete Document_reflection_;
}

void protobuf_AddDesc_search_5fresult_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023search_result.proto\022\002pb\"\340\001\n\014SearchResu"
    "lt\022\'\n\006status\030\001 \002(\0162\027.pb.SearchResult.Sta"
    "tus\022\r\n\005total\030\002 \001(\005\022\020\n\010returned\030\003 \001(\005\022\021\n\t"
    "time_used\030\004 \001(\005\022\031\n\006histos\030\005 \003(\0132\t.pb.His"
    "to\022\016\n\006fields\030\006 \003(\t\022\037\n\tdocuments\030\007 \003(\0132\014."
    "pb.Document\"\'\n\006Status\022\r\n\tSTATUS_OK\020\000\022\016\n\n"
    "STATUS_ERR\020\001\"s\n\005Histo\022\r\n\005field\030\001 \002(\t\022\r\n\005"
    "count\030\002 \002(\005\022\035\n\005pairs\030\003 \003(\0132\016.pb.Histo.Pa"
    "ir\032-\n\004Pair\022\026\n\003key\030\001 \002(\0132\t.pb.Value\022\r\n\005co"
    "unt\030\002 \002(\005\"\"\n\006GeoLoc\022\013\n\003lng\030\001 \002(\002\022\013\n\003lat\030"
    "\002 \002(\002\"\232\002\n\005Value\022\034\n\004type\030\001 \002(\0162\016.pb.Value"
    ".Type\022\016\n\006svalue\030\002 \001(\t\022\016\n\006ivalue\030\003 \001(\003\022\016\n"
    "\006dvalue\030\004 \001(\001\022\032\n\006geoloc\030\005 \001(\0132\n.pb.GeoLo"
    "c\022\017\n\007ivalues\030\006 \003(\003\022\017\n\007dvalues\030\007 \003(\001\022\033\n\007g"
    "eolocs\030\010 \003(\0132\n.pb.GeoLoc\"h\n\004Type\022\t\n\005EMPT"
    "Y\020\000\022\n\n\006STRING\020\001\022\007\n\003INT\020\002\022\n\n\006DOUBLE\020\003\022\n\n\006"
    "GEOLOC\020\004\022\n\n\006INTARR\020\005\022\r\n\tDOUBLEARR\020\006\022\r\n\tG"
    "EOLOCARR\020\007\"%\n\010Document\022\031\n\006values\030\001 \003(\0132\t"
    ".pb.Value", 729);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "search_result.proto", &protobuf_RegisterTypes);
  SearchResult::default_instance_ = new SearchResult();
  Histo::default_instance_ = new Histo();
  Histo_Pair::default_instance_ = new Histo_Pair();
  GeoLoc::default_instance_ = new GeoLoc();
  Value::default_instance_ = new Value();
  Document::default_instance_ = new Document();
  SearchResult::default_instance_->InitAsDefaultInstance();
  Histo::default_instance_->InitAsDefaultInstance();
  Histo_Pair::default_instance_->InitAsDefaultInstance();
  GeoLoc::default_instance_->InitAsDefaultInstance();
  Value::default_instance_->InitAsDefaultInstance();
  Document::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_search_5fresult_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_search_5fresult_2eproto {
  StaticDescriptorInitializer_search_5fresult_2eproto() {
    protobuf_AddDesc_search_5fresult_2eproto();
  }
} static_descriptor_initializer_search_5fresult_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* SearchResult_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchResult_Status_descriptor_;
}
bool SearchResult_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SearchResult_Status SearchResult::STATUS_OK;
const SearchResult_Status SearchResult::STATUS_ERR;
const SearchResult_Status SearchResult::Status_MIN;
const SearchResult_Status SearchResult::Status_MAX;
const int SearchResult::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SearchResult::kStatusFieldNumber;
const int SearchResult::kTotalFieldNumber;
const int SearchResult::kReturnedFieldNumber;
const int SearchResult::kTimeUsedFieldNumber;
const int SearchResult::kHistosFieldNumber;
const int SearchResult::kFieldsFieldNumber;
const int SearchResult::kDocumentsFieldNumber;
#endif  // !_MSC_VER

SearchResult::SearchResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchResult::InitAsDefaultInstance() {
}

SearchResult::SearchResult(const SearchResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchResult::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  total_ = 0;
  returned_ = 0;
  time_used_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchResult::~SearchResult() {
  SharedDtor();
}

void SearchResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchResult_descriptor_;
}

const SearchResult& SearchResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_search_5fresult_2eproto();  return *default_instance_;
}

SearchResult* SearchResult::default_instance_ = NULL;

SearchResult* SearchResult::New() const {
  return new SearchResult;
}

void SearchResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    total_ = 0;
    returned_ = 0;
    time_used_ = 0;
  }
  histos_.Clear();
  fields_.Clear();
  documents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.SearchResult.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::SearchResult_Status_IsValid(value)) {
            set_status(static_cast< ::pb::SearchResult_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total;
        break;
      }
      
      // optional int32 total = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_returned;
        break;
      }
      
      // optional int32 returned = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_returned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returned_)));
          set_has_returned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time_used;
        break;
      }
      
      // optional int32 time_used = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_used_)));
          set_has_time_used();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_histos;
        break;
      }
      
      // repeated .pb.Histo histos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_histos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_histos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_histos;
        if (input->ExpectTag(50)) goto parse_fields;
        break;
      }
      
      // repeated string fields = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fields(0).data(), this->fields(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fields;
        if (input->ExpectTag(58)) goto parse_documents;
        break;
      }
      
      // repeated .pb.Document documents = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_documents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_documents;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.SearchResult.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }
  
  // optional int32 total = 2;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total(), output);
  }
  
  // optional int32 returned = 3;
  if (has_returned()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->returned(), output);
  }
  
  // optional int32 time_used = 4;
  if (has_time_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time_used(), output);
  }
  
  // repeated .pb.Histo histos = 5;
  for (int i = 0; i < this->histos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->histos(i), output);
  }
  
  // repeated string fields = 6;
  for (int i = 0; i < this->fields_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->fields(i).data(), this->fields(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->fields(i), output);
  }
  
  // repeated .pb.Document documents = 7;
  for (int i = 0; i < this->documents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->documents(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.SearchResult.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }
  
  // optional int32 total = 2;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total(), target);
  }
  
  // optional int32 returned = 3;
  if (has_returned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->returned(), target);
  }
  
  // optional int32 time_used = 4;
  if (has_time_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time_used(), target);
  }
  
  // repeated .pb.Histo histos = 5;
  for (int i = 0; i < this->histos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->histos(i), target);
  }
  
  // repeated string fields = 6;
  for (int i = 0; i < this->fields_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fields(i).data(), this->fields(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->fields(i), target);
  }
  
  // repeated .pb.Document documents = 7;
  for (int i = 0; i < this->documents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->documents(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.SearchResult.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // optional int32 total = 2;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }
    
    // optional int32 returned = 3;
    if (has_returned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->returned());
    }
    
    // optional int32 time_used = 4;
    if (has_time_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_used());
    }
    
  }
  // repeated .pb.Histo histos = 5;
  total_size += 1 * this->histos_size();
  for (int i = 0; i < this->histos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->histos(i));
  }
  
  // repeated string fields = 6;
  total_size += 1 * this->fields_size();
  for (int i = 0; i < this->fields_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }
  
  // repeated .pb.Document documents = 7;
  total_size += 1 * this->documents_size();
  for (int i = 0; i < this->documents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->documents(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchResult::MergeFrom(const SearchResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  histos_.MergeFrom(from.histos_);
  fields_.MergeFrom(from.fields_);
  documents_.MergeFrom(from.documents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_returned()) {
      set_returned(from.returned());
    }
    if (from.has_time_used()) {
      set_time_used(from.time_used());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchResult::CopyFrom(const SearchResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < histos_size(); i++) {
    if (!this->histos(i).IsInitialized()) return false;
  }
  for (int i = 0; i < documents_size(); i++) {
    if (!this->documents(i).IsInitialized()) return false;
  }
  return true;
}

void SearchResult::Swap(SearchResult* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(total_, other->total_);
    std::swap(returned_, other->returned_);
    std::swap(time_used_, other->time_used_);
    histos_.Swap(&other->histos_);
    fields_.Swap(&other->fields_);
    documents_.Swap(&other->documents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchResult_descriptor_;
  metadata.reflection = SearchResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Histo_Pair::kKeyFieldNumber;
const int Histo_Pair::kCountFieldNumber;
#endif  // !_MSC_VER

Histo_Pair::Histo_Pair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Histo_Pair::InitAsDefaultInstance() {
  key_ = const_cast< ::pb::Value*>(&::pb::Value::default_instance());
}

Histo_Pair::Histo_Pair(const Histo_Pair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Histo_Pair::SharedCtor() {
  _cached_size_ = 0;
  key_ = NULL;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Histo_Pair::~Histo_Pair() {
  SharedDtor();
}

void Histo_Pair::SharedDtor() {
  if (this != default_instance_) {
    delete key_;
  }
}

void Histo_Pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Histo_Pair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Histo_Pair_descriptor_;
}

const Histo_Pair& Histo_Pair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_search_5fresult_2eproto();  return *default_instance_;
}

Histo_Pair* Histo_Pair::default_instance_ = NULL;

Histo_Pair* Histo_Pair::New() const {
  return new Histo_Pair;
}

void Histo_Pair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != NULL) key_->::pb::Value::Clear();
    }
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Histo_Pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.Value key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Histo_Pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.Value key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->key(), output);
  }
  
  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Histo_Pair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.Value key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->key(), target);
  }
  
  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Histo_Pair::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.Value key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }
    
    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Histo_Pair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Histo_Pair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Histo_Pair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Histo_Pair::MergeFrom(const Histo_Pair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      mutable_key()->::pb::Value::MergeFrom(from.key());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Histo_Pair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Histo_Pair::CopyFrom(const Histo_Pair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Histo_Pair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_key()) {
    if (!this->key().IsInitialized()) return false;
  }
  return true;
}

void Histo_Pair::Swap(Histo_Pair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Histo_Pair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Histo_Pair_descriptor_;
  metadata.reflection = Histo_Pair_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Histo::kFieldFieldNumber;
const int Histo::kCountFieldNumber;
const int Histo::kPairsFieldNumber;
#endif  // !_MSC_VER

Histo::Histo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Histo::InitAsDefaultInstance() {
}

Histo::Histo(const Histo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Histo::SharedCtor() {
  _cached_size_ = 0;
  field_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Histo::~Histo() {
  SharedDtor();
}

void Histo::SharedDtor() {
  if (field_ != &::google::protobuf::internal::kEmptyString) {
    delete field_;
  }
  if (this != default_instance_) {
  }
}

void Histo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Histo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Histo_descriptor_;
}

const Histo& Histo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_search_5fresult_2eproto();  return *default_instance_;
}

Histo* Histo::default_instance_ = NULL;

Histo* Histo::New() const {
  return new Histo;
}

void Histo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_field()) {
      if (field_ != &::google::protobuf::internal::kEmptyString) {
        field_->clear();
      }
    }
    count_ = 0;
  }
  pairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Histo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string field = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field().data(), this->field().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pairs;
        break;
      }
      
      // repeated .pb.Histo.Pair pairs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pairs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pairs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Histo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string field = 1;
  if (has_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field().data(), this->field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->field(), output);
  }
  
  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  // repeated .pb.Histo.Pair pairs = 3;
  for (int i = 0; i < this->pairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pairs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Histo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string field = 1;
  if (has_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field().data(), this->field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->field(), target);
  }
  
  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  // repeated .pb.Histo.Pair pairs = 3;
  for (int i = 0; i < this->pairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pairs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Histo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string field = 1;
    if (has_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field());
    }
    
    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  // repeated .pb.Histo.Pair pairs = 3;
  total_size += 1 * this->pairs_size();
  for (int i = 0; i < this->pairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pairs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Histo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Histo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Histo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Histo::MergeFrom(const Histo& from) {
  GOOGLE_CHECK_NE(&from, this);
  pairs_.MergeFrom(from.pairs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field()) {
      set_field(from.field());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Histo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Histo::CopyFrom(const Histo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Histo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < pairs_size(); i++) {
    if (!this->pairs(i).IsInitialized()) return false;
  }
  return true;
}

void Histo::Swap(Histo* other) {
  if (other != this) {
    std::swap(field_, other->field_);
    std::swap(count_, other->count_);
    pairs_.Swap(&other->pairs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Histo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Histo_descriptor_;
  metadata.reflection = Histo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GeoLoc::kLngFieldNumber;
const int GeoLoc::kLatFieldNumber;
#endif  // !_MSC_VER

GeoLoc::GeoLoc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GeoLoc::InitAsDefaultInstance() {
}

GeoLoc::GeoLoc(const GeoLoc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GeoLoc::SharedCtor() {
  _cached_size_ = 0;
  lng_ = 0;
  lat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeoLoc::~GeoLoc() {
  SharedDtor();
}

void GeoLoc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GeoLoc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoLoc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeoLoc_descriptor_;
}

const GeoLoc& GeoLoc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_search_5fresult_2eproto();  return *default_instance_;
}

GeoLoc* GeoLoc::default_instance_ = NULL;

GeoLoc* GeoLoc::New() const {
  return new GeoLoc;
}

void GeoLoc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lng_ = 0;
    lat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeoLoc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float lng = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lng_)));
          set_has_lng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_lat;
        break;
      }
      
      // required float lat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeoLoc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float lng = 1;
  if (has_lng()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->lng(), output);
  }
  
  // required float lat = 2;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeoLoc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float lng = 1;
  if (has_lng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->lng(), target);
  }
  
  // required float lat = 2;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeoLoc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float lng = 1;
    if (has_lng()) {
      total_size += 1 + 4;
    }
    
    // required float lat = 2;
    if (has_lat()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoLoc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeoLoc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeoLoc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeoLoc::MergeFrom(const GeoLoc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lng()) {
      set_lng(from.lng());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeoLoc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoLoc::CopyFrom(const GeoLoc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoLoc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GeoLoc::Swap(GeoLoc* other) {
  if (other != this) {
    std::swap(lng_, other->lng_);
    std::swap(lat_, other->lat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeoLoc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeoLoc_descriptor_;
  metadata.reflection = GeoLoc_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Value_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Value_Type_descriptor_;
}
bool Value_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Value_Type Value::EMPTY;
const Value_Type Value::STRING;
const Value_Type Value::INT;
const Value_Type Value::DOUBLE;
const Value_Type Value::GEOLOC;
const Value_Type Value::INTARR;
const Value_Type Value::DOUBLEARR;
const Value_Type Value::GEOLOCARR;
const Value_Type Value::Type_MIN;
const Value_Type Value::Type_MAX;
const int Value::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Value::kTypeFieldNumber;
const int Value::kSvalueFieldNumber;
const int Value::kIvalueFieldNumber;
const int Value::kDvalueFieldNumber;
const int Value::kGeolocFieldNumber;
const int Value::kIvaluesFieldNumber;
const int Value::kDvaluesFieldNumber;
const int Value::kGeolocsFieldNumber;
#endif  // !_MSC_VER

Value::Value()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Value::InitAsDefaultInstance() {
  geoloc_ = const_cast< ::pb::GeoLoc*>(&::pb::GeoLoc::default_instance());
}

Value::Value(const Value& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Value::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  svalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ivalue_ = GOOGLE_LONGLONG(0);
  dvalue_ = 0;
  geoloc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Value::~Value() {
  SharedDtor();
}

void Value::SharedDtor() {
  if (svalue_ != &::google::protobuf::internal::kEmptyString) {
    delete svalue_;
  }
  if (this != default_instance_) {
    delete geoloc_;
  }
}

void Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Value_descriptor_;
}

const Value& Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_search_5fresult_2eproto();  return *default_instance_;
}

Value* Value::default_instance_ = NULL;

Value* Value::New() const {
  return new Value;
}

void Value::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_svalue()) {
      if (svalue_ != &::google::protobuf::internal::kEmptyString) {
        svalue_->clear();
      }
    }
    ivalue_ = GOOGLE_LONGLONG(0);
    dvalue_ = 0;
    if (has_geoloc()) {
      if (geoloc_ != NULL) geoloc_->::pb::GeoLoc::Clear();
    }
  }
  ivalues_.Clear();
  dvalues_.Clear();
  geolocs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.Value.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Value_Type_IsValid(value)) {
            set_type(static_cast< ::pb::Value_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_svalue;
        break;
      }
      
      // optional string svalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->svalue().data(), this->svalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ivalue;
        break;
      }
      
      // optional int64 ivalue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ivalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ivalue_)));
          set_has_ivalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_dvalue;
        break;
      }
      
      // optional double dvalue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dvalue_)));
          set_has_dvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_geoloc;
        break;
      }
      
      // optional .pb.GeoLoc geoloc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geoloc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geoloc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ivalues;
        break;
      }
      
      // repeated int64 ivalues = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ivalues:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48, input, this->mutable_ivalues())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_ivalues())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ivalues;
        if (input->ExpectTag(57)) goto parse_dvalues;
        break;
      }
      
      // repeated double dvalues = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dvalues:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 57, input, this->mutable_dvalues())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dvalues())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_dvalues;
        if (input->ExpectTag(66)) goto parse_geolocs;
        break;
      }
      
      // repeated .pb.GeoLoc geolocs = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geolocs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_geolocs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_geolocs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.Value.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional string svalue = 2;
  if (has_svalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svalue().data(), this->svalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->svalue(), output);
  }
  
  // optional int64 ivalue = 3;
  if (has_ivalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ivalue(), output);
  }
  
  // optional double dvalue = 4;
  if (has_dvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->dvalue(), output);
  }
  
  // optional .pb.GeoLoc geoloc = 5;
  if (has_geoloc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->geoloc(), output);
  }
  
  // repeated int64 ivalues = 6;
  for (int i = 0; i < this->ivalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->ivalues(i), output);
  }
  
  // repeated double dvalues = 7;
  for (int i = 0; i < this->dvalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      7, this->dvalues(i), output);
  }
  
  // repeated .pb.GeoLoc geolocs = 8;
  for (int i = 0; i < this->geolocs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->geolocs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.Value.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional string svalue = 2;
  if (has_svalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svalue().data(), this->svalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->svalue(), target);
  }
  
  // optional int64 ivalue = 3;
  if (has_ivalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ivalue(), target);
  }
  
  // optional double dvalue = 4;
  if (has_dvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->dvalue(), target);
  }
  
  // optional .pb.GeoLoc geoloc = 5;
  if (has_geoloc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->geoloc(), target);
  }
  
  // repeated int64 ivalues = 6;
  for (int i = 0; i < this->ivalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(6, this->ivalues(i), target);
  }
  
  // repeated double dvalues = 7;
  for (int i = 0; i < this->dvalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(7, this->dvalues(i), target);
  }
  
  // repeated .pb.GeoLoc geolocs = 8;
  for (int i = 0; i < this->geolocs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->geolocs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Value::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.Value.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string svalue = 2;
    if (has_svalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->svalue());
    }
    
    // optional int64 ivalue = 3;
    if (has_ivalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ivalue());
    }
    
    // optional double dvalue = 4;
    if (has_dvalue()) {
      total_size += 1 + 8;
    }
    
    // optional .pb.GeoLoc geoloc = 5;
    if (has_geoloc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geoloc());
    }
    
  }
  // repeated int64 ivalues = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->ivalues_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->ivalues(i));
    }
    total_size += 1 * this->ivalues_size() + data_size;
  }
  
  // repeated double dvalues = 7;
  {
    int data_size = 0;
    data_size = 8 * this->dvalues_size();
    total_size += 1 * this->dvalues_size() + data_size;
  }
  
  // repeated .pb.GeoLoc geolocs = 8;
  total_size += 1 * this->geolocs_size();
  for (int i = 0; i < this->geolocs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->geolocs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Value* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Value*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
  GOOGLE_CHECK_NE(&from, this);
  ivalues_.MergeFrom(from.ivalues_);
  dvalues_.MergeFrom(from.dvalues_);
  geolocs_.MergeFrom(from.geolocs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_svalue()) {
      set_svalue(from.svalue());
    }
    if (from.has_ivalue()) {
      set_ivalue(from.ivalue());
    }
    if (from.has_dvalue()) {
      set_dvalue(from.dvalue());
    }
    if (from.has_geoloc()) {
      mutable_geoloc()->::pb::GeoLoc::MergeFrom(from.geoloc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_geoloc()) {
    if (!this->geoloc().IsInitialized()) return false;
  }
  for (int i = 0; i < geolocs_size(); i++) {
    if (!this->geolocs(i).IsInitialized()) return false;
  }
  return true;
}

void Value::Swap(Value* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(svalue_, other->svalue_);
    std::swap(ivalue_, other->ivalue_);
    std::swap(dvalue_, other->dvalue_);
    std::swap(geoloc_, other->geoloc_);
    ivalues_.Swap(&other->ivalues_);
    dvalues_.Swap(&other->dvalues_);
    geolocs_.Swap(&other->geolocs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Value_descriptor_;
  metadata.reflection = Value_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Document::kValuesFieldNumber;
#endif  // !_MSC_VER

Document::Document()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Document::InitAsDefaultInstance() {
}

Document::Document(const Document& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Document::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Document::~Document() {
  SharedDtor();
}

void Document::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Document::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Document::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Document_descriptor_;
}

const Document& Document::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_search_5fresult_2eproto();  return *default_instance_;
}

Document* Document::default_instance_ = NULL;

Document* Document::New() const {
  return new Document;
}

void Document::Clear() {
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Document::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Value values = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Document::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Value values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->values(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Document::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Value values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->values(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Document::ByteSize() const {
  int total_size = 0;
  
  // repeated .pb.Value values = 1;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Document* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Document*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Document::MergeFrom(const Document& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Document::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Document::CopyFrom(const Document& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document::IsInitialized() const {
  
  for (int i = 0; i < values_size(); i++) {
    if (!this->values(i).IsInitialized()) return false;
  }
  return true;
}

void Document::Swap(Document* other) {
  if (other != this) {
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Document::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Document_descriptor_;
  metadata.reflection = Document_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
